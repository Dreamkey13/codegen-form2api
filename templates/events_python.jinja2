from typing import Any, Dict, List, Optional, Callable
from datetime import datetime
import json
import logging
from functools import wraps

logger = logging.getLogger(__name__)

class EventHandler:
    """Base class for event handlers."""
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.handlers: List[Callable] = []

    def add_handler(self, handler: Callable):
        """Add an event handler function."""
        self.handlers.append(handler)

    async def handle(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Handle the event by executing all registered handlers."""
        result = {"status": "success", "data": data}
        
        for handler in self.handlers:
            try:
                handler_result = await handler(data)
                if handler_result:
                    result.update(handler_result)
            except Exception as e:
                logger.error(f"Error in event handler {self.name}: {str(e)}")
                result["status"] = "error"
                result["error"] = str(e)
                break
        
        return result

class EventManager:
    """Manager for event handlers."""
    def __init__(self):
        self.handlers: Dict[str, EventHandler] = {}

    def register_handler(self, name: str, description: str) -> EventHandler:
        """Register a new event handler."""
        if name not in self.handlers:
            self.handlers[name] = EventHandler(name, description)
        return self.handlers[name]

    async def handle_event(self, name: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Handle an event by name."""
        if name not in self.handlers:
            return {
                "status": "error",
                "error": f"Event handler '{name}' not found"
            }
        
        return await self.handlers[name].handle(data)

# Create event manager instance
event_manager = EventManager()

# Register event handlers
{% for event in event_handlers %}
{{ event.name }}_handler = event_manager.register_handler(
    "{{ event.name }}",
    "{{ event.description }}"
)

@{{ event.name }}_handler.add_handler
async def handle_{{ event.name }}(data: Dict[str, Any]) -> Dict[str, Any]:
    """Handle {{ event.name }} event."""
    try:
        # Add your event handling logic here
        {% if event.type == 'validation' %}
        # Validation event handling
        field = data.get("field")
        value = data.get("value")
        
        # Perform validation
        if not value:
            return {
                "status": "error",
                "message": "{{ event.error_message }}"
            }
        {% elif event.type == 'calculation' %}
        # Calculation event handling
        values = data.get("values", {})
        
        # Perform calculation
        result = sum(float(v) for v in values.values() if v)
        return {
            "result": result
        }
        {% elif event.type == 'visibility' %}
        # Visibility event handling
        field = data.get("field")
        condition = data.get("condition")
        
        # Update visibility
        return {
            "visible": eval(condition)
        }
        {% elif event.type == 'dependency' %}
        # Dependency event handling
        field = data.get("field")
        dependent_field = data.get("dependent_field")
        value = data.get("value")
        
        # Update dependent field
        return {
            "update": {
                "field": dependent_field,
                "value": value
            }
        }
        {% endif %}
        
        return {
            "status": "success",
            "message": "Event handled successfully"
        }
    except Exception as e:
        logger.error(f"Error handling {{ event.name }} event: {str(e)}")
        return {
            "status": "error",
            "error": str(e)
        }
{% endfor %}

# Event handling decorator
def handle_event(event_name: str):
    """Decorator for handling events."""
    def decorator(func: Callable):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                result = await func(*args, **kwargs)
                return await event_manager.handle_event(event_name, result)
            except Exception as e:
                logger.error(f"Error in event handler {event_name}: {str(e)}")
                return {
                    "status": "error",
                    "error": str(e)
                }
        return wrapper
    return decorator

# Event utility functions
def format_event_data(data: Dict[str, Any]) -> Dict[str, Any]:
    """Format event data for logging."""
    return {
        "timestamp": datetime.now().isoformat(),
        "data": data
    }

def log_event(event_name: str, data: Dict[str, Any]):
    """Log event data."""
    logger.info(f"Event {event_name}: {json.dumps(format_event_data(data))}")

def validate_event_data(data: Dict[str, Any], required_fields: List[str]) -> bool:
    """Validate event data has required fields."""
    return all(field in data for field in required_fields) 