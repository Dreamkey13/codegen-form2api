from typing import Dict, Any, Callable, List
import asyncio
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class EventManager:
    """Manages form events and their handlers."""
    
    def __init__(self):
        self._handlers: Dict[str, List[Callable]] = {}
        self._event_history: List[Dict[str, Any]] = []
    
    def register_handler(self, event_type: str, handler: Callable) -> None:
        """Register a new event handler."""
        if event_type not in self._handlers:
            self._handlers[event_type] = []
        self._handlers[event_type].append(handler)
    
    def unregister_handler(self, event_type: str, handler: Callable) -> None:
        """Unregister an event handler."""
        if event_type in self._handlers:
            self._handlers[event_type].remove(handler)
    
    async def trigger_event(self, event_type: str, data: Dict[str, Any]) -> None:
        """Trigger an event and execute all registered handlers."""
        event = {
            "type": event_type,
            "data": data,
            "timestamp": datetime.now().isoformat()
        }
        self._event_history.append(event)
        
        if event_type in self._handlers:
            for handler in self._handlers[event_type]:
                try:
                    if asyncio.iscoroutinefunction(handler):
                        await handler(data)
                    else:
                        handler(data)
                except Exception as e:
                    logger.error(f"Error in event handler for {event_type}: {str(e)}")
    
    def get_event_history(self) -> List[Dict[str, Any]]:
        """Get the event history."""
        return self._event_history

class FieldEventManager:
    """Manages field-specific events."""
    
    def __init__(self):
        self._field_handlers: Dict[str, Dict[str, List[Callable]]] = {}
    
    def register_field_handler(self, field_name: str, event_type: str, handler: Callable) -> None:
        """Register a handler for a specific field event."""
        if field_name not in self._field_handlers:
            self._field_handlers[field_name] = {}
        if event_type not in self._field_handlers[field_name]:
            self._field_handlers[field_name][event_type] = []
        self._field_handlers[field_name][event_type].append(handler)
    
    async def trigger_field_event(self, field_name: str, event_type: str, value: Any) -> None:
        """Trigger a field-specific event."""
        if field_name in self._field_handlers and event_type in self._field_handlers[field_name]:
            for handler in self._field_handlers[field_name][event_type]:
                try:
                    if asyncio.iscoroutinefunction(handler):
                        await handler(value)
                    else:
                        handler(value)
                except Exception as e:
                    logger.error(f"Error in field event handler for {field_name}.{event_type}: {str(e)}")

class FormEventManager:
    """Manages form-level events."""
    
    def __init__(self):
        self._form_handlers: Dict[str, List[Callable]] = {}
        self._event_manager = EventManager()
        self._field_manager = FieldEventManager()
    
    def register_form_handler(self, event_type: str, handler: Callable) -> None:
        """Register a form-level event handler."""
        self._event_manager.register_handler(event_type, handler)
    
    def register_field_handler(self, field_name: str, event_type: str, handler: Callable) -> None:
        """Register a field-level event handler."""
        self._field_manager.register_field_handler(field_name, event_type, handler)
    
    async def handle_form_submit(self, form_data: Dict[str, Any]) -> None:
        """Handle form submission."""
        await self._event_manager.trigger_event("form_submit", form_data)
    
    async def handle_field_change(self, field_name: str, value: Any) -> None:
        """Handle field value changes."""
        await self._field_manager.trigger_field_event(field_name, "change", value)
    
    async def handle_field_focus(self, field_name: str) -> None:
        """Handle field focus events."""
        await self._field_manager.trigger_field_event(field_name, "focus", None)
    
    async def handle_field_blur(self, field_name: str) -> None:
        """Handle field blur events."""
        await self._field_manager.trigger_field_event(field_name, "blur", None)
    
    def get_event_history(self) -> List[Dict[str, Any]]:
        """Get the event history."""
        return self._event_manager.get_event_history() 