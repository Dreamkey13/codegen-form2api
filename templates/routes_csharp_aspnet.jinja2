using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using YourNamespace.Models;
using YourNamespace.Services;
using YourNamespace.Validators;

namespace YourNamespace.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class {{ form_name|capitalize }}Controller : ControllerBase
    {
        private readonly IFormService _formService;
        private readonly IFormValidator _formValidator;

        public {{ form_name|capitalize }}Controller(IFormService formService, IFormValidator formValidator)
        {
            _formService = formService;
            _formValidator = formValidator;
        }

        [HttpPost]
        public async Task<ActionResult<FormModel>> CreateForm(FormModel formData)
        {
            try
            {
                await _formValidator.ValidateAsync(formData);
                var result = await _formService.CreateAsync(formData);
                return Ok(result);
            }
            catch (ValidationException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<FormModel>>> GetAllForms()
        {
            var forms = await _formService.GetAllAsync();
            return Ok(forms);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<FormModel>> GetForm(int id)
        {
            var form = await _formService.GetByIdAsync(id);
            if (form == null)
            {
                return NotFound();
            }
            return Ok(form);
        }

        [HttpPut("{id}")]
        public async Task<ActionResult<FormModel>> UpdateForm(int id, FormModel formData)
        {
            try
            {
                await _formValidator.ValidateAsync(formData);
                var result = await _formService.UpdateAsync(id, formData);
                if (result == null)
                {
                    return NotFound();
                }
                return Ok(result);
            }
            catch (ValidationException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteForm(int id)
        {
            var success = await _formService.DeleteAsync(id);
            if (!success)
            {
                return NotFound();
            }
            return Ok();
        }
    }
} 