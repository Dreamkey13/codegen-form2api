package com.example.{{ form_name|lower }}.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.*;

@RestController
@RequestMapping("/api/{{ form_name|lower }}")
@Validated
public class {{ form_name }}Controller {
    private static final Logger logger = LoggerFactory.getLogger({{ form_name }}Controller.class);

    // Models
    {% for field in fields %}
    public static class {{ field.name|capitalize }}Field {
        {% if field.validation %}
        {% for rule in field.validation %}
        {% if rule.type == 'required' %}
        @NotNull(message = "{{ rule.message }}")
        {% elif rule.type == 'min_length' %}
        @Size(min = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'max_length' %}
        @Size(max = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'pattern' %}
        @Pattern(regexp = "{{ rule.value }}", message = "{{ rule.message }}")
        {% elif rule.type == 'min' %}
        @Min(value = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'max' %}
        @Max(value = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'email' %}
        @Email(message = "{{ rule.message }}")
        {% endif %}
        {% endfor %}
        {% endif %}
        private {{ field.type|capitalize }} value;

        public {{ field.type|capitalize }} getValue() {
            return value;
        }

        public void setValue({{ field.type|capitalize }} value) {
            this.value = value;
        }
    }
    {% endfor %}

    public static class {{ form_name }}Form {
        {% for field in fields %}
        {% if field.validation %}
        {% for rule in field.validation %}
        {% if rule.type == 'required' %}
        @NotNull(message = "{{ rule.message }}")
        {% elif rule.type == 'min_length' %}
        @Size(min = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'max_length' %}
        @Size(max = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'pattern' %}
        @Pattern(regexp = "{{ rule.value }}", message = "{{ rule.message }}")
        {% elif rule.type == 'min' %}
        @Min(value = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'max' %}
        @Max(value = {{ rule.value }}, message = "{{ rule.message }}")
        {% elif rule.type == 'email' %}
        @Email(message = "{{ rule.message }}")
        {% endif %}
        {% endfor %}
        {% endif %}
        private {{ field.type|capitalize }} {{ field.name }};

        public {{ field.type|capitalize }} get{{ field.name|capitalize }}() {
            return {{ field.name }};
        }

        public void set{{ field.name|capitalize }}({{ field.type|capitalize }} {{ field.name }}) {
            this.{{ field.name }} = {{ field.name }};
        }
        {% endfor %}
    }

    // Routes
    @PostMapping("/submit")
    public ResponseEntity<?> submitForm(@Valid @RequestBody {{ form_name }}Form form) {
        try {
            Map<String, Object> result = new HashMap<>();
            result.put("status", "success");
            result.put("message", "Form submitted successfully");
            result.put("data", form);

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            logger.error("Error processing form submission", e);
            Map<String, String> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(error);
        }
    }

    @GetMapping("/fields")
    public ResponseEntity<?> getFormFields() {
        List<Map<String, Object>> fields = new ArrayList<>();
        {% for field in fields %}
        Map<String, Object> {{ field.name }}Field = new HashMap<>();
        {{ field.name }}Field.put("name", "{{ field.name }}");
        {{ field.name }}Field.put("type", "{{ field.type }}");
        {{ field.name }}Field.put("required", {{ field.required|lower }});
        
        List<Map<String, Object>> {{ field.name }}Validation = new ArrayList<>();
        {% for rule in field.validation %}
        Map<String, Object> {{ field.name }}_{{ rule.type }} = new HashMap<>();
        {{ field.name }}_{{ rule.type }}.put("type", "{{ rule.type }}");
        {% if rule.value is defined %}
        {{ field.name }}_{{ rule.type }}.put("value", {{ rule.value }});
        {% endif %}
        {{ field.name }}_{{ rule.type }}.put("message", "{{ rule.message }}");
        {{ field.name }}Validation.add({{ field.name }}_{{ rule.type }});
        {% endfor %}
        {{ field.name }}Field.put("validation", {{ field.name }}Validation);
        
        Map<String, String> {{ field.name }}Attributes = new HashMap<>();
        {% for attr, value in field.attributes.items() %}
        {{ field.name }}Attributes.put("{{ attr }}", "{{ value }}");
        {% endfor %}
        {{ field.name }}Field.put("attributes", {{ field.name }}Attributes);
        
        fields.add({{ field.name }}Field);
        {% endfor %}

        Map<String, Object> response = new HashMap<>();
        response.put("fields", fields);
        return ResponseEntity.ok(response);
    }

    // Event Handlers
    {% for event in event_handlers %}
    @PostMapping("/events/{{ event.name }}")
    public ResponseEntity<?> handle{{ event.name|capitalize }}(@RequestBody Map<String, Object> data) {
        try {
            Map<String, Object> result = new HashMap<>();
            result.put("status", "success");
            result.put("message", "Event handled successfully");
            result.put("data", data);

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            logger.error("Error handling {{ event.name }} event", e);
            Map<String, String> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(error);
        }
    }
    {% endfor %}
} 