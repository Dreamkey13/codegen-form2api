document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('{{ form_name|lower }}-form');
    const submitButton = form.querySelector('button[type="submit"]');
    
    // Initialize form validation
    initializeValidation();
    
    // Add event listeners
    form.addEventListener('submit', handleSubmit);
    {% for field in fields %}
    {% if field.events %}
    document.getElementById('{{ field.name }}').addEventListener('{{ field.events.type }}', handle{{ field.name|capitalize }}Event);
    {% endif %}
    {% endfor %}
    
    // Form validation functions
    function initializeValidation() {
        {% for field in fields %}
        {% if field.validation %}
        const {{ field.name }}Input = document.getElementById('{{ field.name }}');
        {{ field.name }}Input.addEventListener('input', function() {
            validate{{ field.name|capitalize }}(this.value);
        });
        {% endif %}
        {% endfor %}
    }
    
    {% for field in fields %}
    {% if field.validation %}
    function validate{{ field.name|capitalize }}(value) {
        const input = document.getElementById('{{ field.name }}');
        const errorElement = document.getElementById('{{ field.name }}-error');
        let isValid = true;
        let errorMessage = '';
        
        {% if field.required %}
        if (!value.trim()) {
            isValid = false;
            errorMessage = '{{ field.name|capitalize }} is required';
        }
        {% endif %}
        
        {% if field.validation.email %}
        if (isValid && value) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(value)) {
                isValid = false;
                errorMessage = 'Invalid email format';
            }
        }
        {% endif %}
        
        {% if field.validation.pattern %}
        if (isValid && value) {
            const pattern = new RegExp('{{ field.validation.pattern }}');
            if (!pattern.test(value)) {
                isValid = false;
                errorMessage = 'Invalid format';
            }
        }
        {% endif %}
        
        {% if field.validation.min %}
        if (isValid && value) {
            if (Number(value) < {{ field.validation.min }}) {
                isValid = false;
                errorMessage = `Value must be greater than or equal to {{ field.validation.min }}`;
            }
        }
        {% endif %}
        
        {% if field.validation.max %}
        if (isValid && value) {
            if (Number(value) > {{ field.validation.max }}) {
                isValid = false;
                errorMessage = `Value must be less than or equal to {{ field.validation.max }}`;
            }
        }
        {% endif %}
        
        input.classList.toggle('error', !isValid);
        errorElement.textContent = errorMessage;
        return isValid;
    }
    {% endif %}
    {% endfor %}
    
    // Event handlers
    {% for field in fields %}
    {% if field.events %}
    function handle{{ field.name|capitalize }}Event(event) {
        const value = event.target.value;
        {% if field.events.onChange %}
        // Handle onChange event
        {{ field.events.onChange }}
        {% endif %}
        {% if field.events.onFocus %}
        // Handle onFocus event
        {{ field.events.onFocus }}
        {% endif %}
        {% if field.events.onBlur %}
        // Handle onBlur event
        {{ field.events.onBlur }}
        {% endif %}
    }
    {% endif %}
    {% endfor %}
    
    // Form submission handler
    async function handleSubmit(event) {
        event.preventDefault();
        
        // Validate all fields
        let isValid = true;
        {% for field in fields %}
        {% if field.validation %}
        if (!validate{{ field.name|capitalize }}(document.getElementById('{{ field.name }}').value)) {
            isValid = false;
        }
        {% endif %}
        {% endfor %}
        
        if (!isValid) {
            return;
        }
        
        // Disable submit button
        submitButton.disabled = true;
        
        try {
            // Collect form data
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            
            // Send data to server
            const response = await fetch('/api/{{ form_name|lower }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            
            const result = await response.json();
            
            // Handle successful submission
            form.reset();
            showSuccessMessage('Form submitted successfully!');
            
        } catch (error) {
            console.error('Error:', error);
            showErrorMessage('An error occurred while submitting the form.');
        } finally {
            submitButton.disabled = false;
        }
    }
    
    // Utility functions
    function showSuccessMessage(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success';
        alertDiv.textContent = message;
        form.insertAdjacentElement('beforebegin', alertDiv);
        setTimeout(() => alertDiv.remove(), 5000);
    }
    
    function showErrorMessage(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger';
        alertDiv.textContent = message;
        form.insertAdjacentElement('beforebegin', alertDiv);
        setTimeout(() => alertDiv.remove(), 5000);
    }
}); 