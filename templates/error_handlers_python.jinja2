from fastapi import HTTPException, Request
from fastapi.responses import JSONResponse
from typing import Dict, Any
import logging
import re

logger = logging.getLogger(__name__)

class ValidationError(Exception):
    def __init__(self, message: str, field: str = None):
        self.message = message
        self.field = field
        super().__init__(self.message)

class FormError(Exception):
    def __init__(self, message: str, code: str = None):
        self.message = message
        self.code = code
        super().__init__(self.message)

async def validation_exception_handler(request: Request, exc: ValidationError) -> JSONResponse:
    """Handle validation errors."""
    logger.warning(f"Validation error: {exc.message} for field: {exc.field}")
    return JSONResponse(
        status_code=400,
        content={
            "error": "Validation Error",
            "message": exc.message,
            "field": exc.field
        }
    )

async def form_exception_handler(request: Request, exc: FormError) -> JSONResponse:
    """Handle form-specific errors."""
    logger.error(f"Form error: {exc.message} with code: {exc.code}")
    return JSONResponse(
        status_code=400,
        content={
            "error": "Form Error",
            "message": exc.message,
            "code": exc.code
        }
    )

async def general_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """Handle general exceptions."""
    logger.error(f"Unexpected error: {str(exc)}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "An unexpected error occurred"
        }
    )

def register_error_handlers(app):
    """Register all error handlers with the FastAPI application."""
    app.add_exception_handler(ValidationError, validation_exception_handler)
    app.add_exception_handler(FormError, form_exception_handler)
    app.add_exception_handler(Exception, general_exception_handler)

def validate_field(field_name: str, value: Any, rules: Dict[str, Any]) -> None:
    """Validate a single field against its rules."""
    if rules.get("required") and value is None:
        raise ValidationError("Field is required", field_name)
    
    if value is not None:
        if rules.get("min") is not None and value < rules["min"]:
            raise ValidationError(f"Value must be greater than or equal to {rules['min']}", field_name)
        
        if rules.get("max") is not None and value > rules["max"]:
            raise ValidationError(f"Value must be less than or equal to {rules['max']}", field_name)
        
        if rules.get("pattern") and not re.match(rules["pattern"], str(value)):
            raise ValidationError("Invalid format", field_name)
        
        if rules.get("email") and not re.match(r"^[^\s@]+@[^\s@]+\.[^\s@]+$", str(value)):
            raise ValidationError("Invalid email format", field_name)

def validate_form_data(data: Dict[str, Any], validation_rules: Dict[str, Any]) -> None:
    """Validate all form fields against their rules."""
    for field_name, rules in validation_rules.items():
        value = data.get(field_name)
        validate_field(field_name, value, rules) 