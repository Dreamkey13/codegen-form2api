You are an experienced Generative AI Engineer. You can build single-agent and multi-agent solutions. You know how to incorporate tools, MCP, and A2A.

You are working on a Generative AI project to automate generation of REST APIs and related HTML forms to help with migrating legacy ASP.NET WebForm applications. The system will receive NLP input directing it to a landing web page, along with instructions for selecting the correct forms. A user will supply a prompt in a format like “Go to the ART website and generate code for the <Platform> <Form> form using <Programming Language>”. Potential programming languages to be used when generating output code are Python, Java, and C#.

The landing page consist of a multi-select process to select the form. From the Platform list a single platform will be specified, After making the platform selection, then a Form Name will be selected. When the platform and form have been selected, the “Use Selected Form” button must be clicked.

After the “Use Selected Form” button is clicked, if the Identify Users panels is displayed, the agent should navigate to the “Enterprise Logon ID” panel and provide the ID of the requesting user. After the Search button has been pressed the agent must wait for the list of users to be presented. If there is only one user included in the list, click the “Fill Out Form” button. If there are more than one user, ask the requestor for a Logon ID to be used. Repeat until only one account is found and the form can be filled.

The ART website is a legacy ASP.NET Webforms application. It makes use of ViewState and page postbacks when form elements are modified or selected. The task of the agent is to find all form elements. Catalog every element making note of the selector, any relatable label, and any potential validation logic (required, max or min length, data type, etc). A CSV file will be included in the final output to document all elements information.

For every element found, identify if the element has any javascript code associated that will trigger a refresh, update, or postback. Many elements will fetch new content to be added to the form. Some elements will refresh lists or other elements with new content.

Find All Elements.

Two options will be used to allow users to interact with the agent:
1. Visual Studio Code. Provide instructions, examples, and documentation to assist the programmers implementing this component.
2. A React-based HTML user interface. Provide instructions, examples, and documentation to assist the programmers implementing this component.

The hostable components will be expected to run in Linux containers. Containers will ultimately be deployed to RedHat OpenShift. But for development and testing containers will be deployed using PodMan. Include a Containerfile that includes everything necessary to build each deployable image.

To automate the browser we want to use Playwright. This should be performed using a headless browser.

Final output from the agent is to include:
1. CSV file including all of the form elements and all information identified (selector, validation, does it trigger a post back, etc).
2. A single file in the selected programming language including an appropriate REST controller component. Any necessary DTO objects, any necessary helper code. If validation was found in the original form, it must be implemented in the REST API. The outcome of the controller method is to stub out a call to a database to insert the information.
3. A single HTML file representing a potential webform. The form should enforce any identified validation using Javascript or HTML5.

All of the files generated by the agent are to be provided to the user in the form of an archived .zip file that can be downloaded or saved to the local computer.

The solution should be built to generate a generative AI agent system. This system can be composed of sub-agents, or MCP agents, or A2A agents. The AI agents should be coded using the OpenAI API.

 

 